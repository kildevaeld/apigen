
{{#if arguments }}
pub fn {{method_name}}(&self, {{{arguments}}}) -> Box<Future<Item={{{method_return}}}, Error=error::Error>> {
{{else}}
pub fn {{method_name}}(&self) -> Box<Future<Item={{{method_return}}}, Error=error::Error>> {
{{/if }}
    let url = utils::join(&self.endpoint, &[{{{http_paths}}}]).unwrap();
    let mut request = self.client.request({{http_method}}, url);
    {{#if has_query}}
    request = request.query(&query);
    {{/if}}
    {{#if has_body}}
    let body_data = utils::encode("application/json", &body).unwrap();
    request = request.body(body_data);
    {{/if}}
    request = request.header("Content-Type", "application/json");
    {{#if has_auth}}
    request = match auth {
        auth::Authorization::Token(token) => request.header("Authorization", format!("bearer {}", token)),
        _ => panic!("invalid auth")
    };
    {{/if}}

    async_request!(self.client, request, {{{method_return}}})
}