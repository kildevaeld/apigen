
{{#if arguments }}
pub fn {{method_name}}(&self, {{{arguments}}}) -> impl Future<Item={{{method_return}}}, Error=error::Error> {
{{else}}
pub fn {{method_name}}(&self) -> impl Future<Item={{{method_return}}}, Error=error::Error> {
{{/if }}
    let url = utils::join(&self.endpoint, &[{{{http_paths}}}])?;
    let mut request = self.client.request({{http_method}}, url);
    {{#if has_query}}
    request = request.query(&query);
    {{/if}}
    {{#if has_body}}
    let body_data = utils::encode("application/json", body)?;
    request = request.body(body_data);
    {{/if}}
    request = request.header(CONTENT_TYPE, "application/json");

    self.request(request)

    /*self.client
        .execute(request.build().unwrap())
        .from_err::<error::Error>()
        .and_then(|mut res| {
            let status = res.status().as_u16();
            let body = mem::replace(res.body_mut(), Decoder::empty());

            let mime = res
                .headers()
                .get(CONTENT_TYPE)
                .and_then(|ct| ct.to_str().ok())
                .unwrap_or("application/json")
                .to_string();

            body.concat2()
                .from_err::<error::Error>()
                .and_then(move |b| {
                    Ok(utils::decode::<{{{method_return}}}>(&mime, &b)?)
                })
                
        })
        .from_err()*/
}